// This file is generated by KDAB's kdwsdl2cpp from helloworld.wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/
#pragma once

#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QString>
#include <QtCore/QObject>
#include <KDSoapServer/KDSoapServerObjectInterface.h>
#include <KDSoapClient/KDSoapClientInterface.h>

#undef daylight
#undef timezone
class Hello_Service;
class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;

class SayHelloJob : public KDSoapJob
{
    Q_OBJECT

public:
    explicit SayHelloJob( Hello_Service* service, QObject* _parent = nullptr );
    void setMsg( const QString& arg0 );
    QString msg() const;
    QString reply() const;

protected:
    virtual void doStart() override;

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    Hello_Service *mService;
    QString mMsg;
    QString mResultReply;
};

class Hello_ServiceServerBase : public QObject, public KDSoapServerObjectInterface
{
    Q_OBJECT

    Q_INTERFACES(KDSoapServerObjectInterface)

public:
    void sayHelloResponse( const KDSoapDelayedResponseHandle& responseHandle, const QString& ret );
    virtual QString sayHello( const QString& msg ) = 0;
    virtual void processRequest( const KDSoapMessage &_request, KDSoapMessage &_response, const QByteArray& _soapAction ) override;

};

/**
    WSDL File for HelloService
 */
class Hello_Service : public QObject
{
    Q_OBJECT

public:
    explicit Hello_Service( QObject* _parent = nullptr );
    ~Hello_Service();
    /**
        Asks Qt to ignore ssl errors in https requests. Use this for testing
        only!
     */
    void ignoreSslErrors();
    /**
        Overwrite the end point defined in the .wsdl file, with another
        http/https URL.
     */
    void setEndPoint( const QString& endPoint );
    /**
        Return the end point that will be used.
     */
    QString endPoint() const;
    /**
        Overwrite the soap version defined in the .wsdl file, with another
        version.
        version can be KDSoapClientInterface::SOAP1_1 or
        KDSoapClientInterface::SOAP1_2
     */
    void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
    /**
        Return the soap version used.n
     */
    KDSoapClientInterface::SoapVersion soapVersion() const;
    /**
        Return the fault code from the last blocking call.
        Empty if no error.
     */
    int lastErrorCode() const;
    /**
        Return the fault code from the last blocking call.
        Empty if no error.
     */
    QString lastFaultCode() const;
    /**
        Return the error from the last blocking call.
        Empty if no error.
     */
    QString lastError() const;
    /**
        Returns the underlying KDSoapClientInterface instance, which allows to
        access setCookieJar, lastResponseHeaders, etc.
     */
    const KDSoapClientInterface *clientInterface() const;
    KDSoapClientInterface *clientInterface();
    /**
        Blocking call to sayHello.
        Not recommended in a GUI thread.
     */
    QString sayHello( const QString& msg );
    /**
        Asynchronous call to sayHello.
        Remember to connect to sayHelloDone and sayHelloError.
        Deprecated, use SayHelloJob instead.
     */
    void asyncSayHello( const QString& msg );

Q_SIGNALS:
    /**
        This signal is emitted whenever a SOAP call failed, for a central
        processing of all SOAP errors.
        method is the name of the method (or operation) that returned the
        fault, for instance "addContact".
     */
    void soapError( const QString& method, const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the asynchronous call asyncSayHello()
        has succeeded.
     */
    void sayHelloDone( const QString& reply );
    /**
        This signal is emitted whenever the asynchronous call asyncSayHello()
        has failed.
     */
    void sayHelloError( const KDSoapMessage& fault );

private Q_SLOTS:
    void _kd_slotSayHelloFinished( KDSoapPendingCallWatcher* watcher );

private:
    class PrivateDPtr;
    PrivateDPtr *d_ptr;
};

